from pathlib import Path

import psycopg2
import pytest
import vcr

from sqlcritic.trace import parse_spans
from sqlcritic.utils import load_data

_db_url = "postgresql://postgres:postgres@localhost:5432/postgres"

_test_schema = """
    DROP TABLE IF EXISTS "demo_entry";
    DROP TABLE IF EXISTS "demo_author";

    CREATE TABLE "demo_author" (
        "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
        "name" text NOT NULL
    );
    
    CREATE TABLE "demo_entry" (
        "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
        "content" text NOT NULL, "published_at" timestamp with time zone NOT NULL, 
        "author_id" bigint NOT NULL
    );

    ALTER TABLE "demo_entry" ADD CONSTRAINT "demo_entry_author_id"
    FOREIGN KEY ("author_id") REFERENCES "demo_author" ("id") DEFERRABLE INITIALLY DEFERRED;

    CREATE INDEX "demo_entry_author_id_index" ON "demo_entry" ("author_id");
"""


def pytest_sessionstart(session):
    connection = psycopg2.connect(_db_url)
    with connection.cursor() as cursor:
        cursor.execute(_test_schema)
        connection.commit()
    connection.close()


@pytest.fixture
def db_url():
    return _db_url


@pytest.fixture
def vcr_cassette(request):
    test_path = Path(request.node.fspath)
    test_filename = test_path.name.replace(".py", "")
    cassette_dir = test_path.parent / "cassettes" / test_filename
    with vcr.use_cassette(
        str(cassette_dir / f"{request.node.name}.yaml"),
        record_mode="once",
        filter_headers=["authorization"],
        match_on=["method", "scheme", "host", "port", "path"],
    ) as cassette:
        yield cassette


@pytest.fixture
def spans():
    data = load_data("tests/fixtures/test-spans.json")
    return parse_spans(data)


@pytest.fixture
def explained():
    return load_data("tests/fixtures/test-explained.json")
